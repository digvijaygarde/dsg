Steps for GIT:

Launch an EC2 instance
Switch to Root user: sudo su -

Install Git: yum install git -y
Verify the Git installation: git --version

Make Directory to create and store for Local Repo: mkdir dsg
Switch to created Directory : cd dsg

Initialize a new Git repository in the directory: git init
--> This command creates a hidden .git folder in the directory, which contains all the metadata and version history for your project.
To verify initialization of git repo : ls -ltra
To revert initialization of git repo and converting back to normal directory : rm -rf .git

Set the Global Username: git config --global user.name "Your Name"
-->Sets your name as the author for all commits you make across all repositories on the current system.
Set the Global Email: git config --global user.email "youremail@example.com"
-->Associates your email address with your commits. This email should match the one you use for services like GitHub if you're pushing commits to a remote repository.
Verify the Configuration: git config --global --list
To edit the Configuration: git config --global --edit

Set Repository-Specific Username and Email: Navigate to a specific repository and configure a different username and email: git Username cmd git config user.name "Your Name"
Email cmd git config user.email "youremail@example.com"

What Happens During a Push when both global and local configuration for specific repo?
When you commit and push code from the repository:
Git will use the repository-specific username and email if they are configured.
If repository-specific settings are absent, Git will fall back to the global username and email.

Create a demo file : vi index.html
--> insert data inside the file 
Verify the file: cat index.html

Check the File’s Status: git status 
--> Git will show that index.html as Untracked file.

Add the Files to the Staging Area:- 
To stage all changes/files at once: git add .  /  git add *
git add <file-name>/index.html
Moves index.html from the workspace to the staging area, marking it for inclusion in the next commit.
Check the File’s Status after adding it to staging area: git status 
--> Git will show that index.html as new file.
To revert file from Staging area to Workspace : git rm --cached index.html   /  git restore --staged <fileName>
git status : show that index.html as Untracked file.

Commit the staged file with a descriptive message: git commit -m "First: Added index.html"
--> This moves the files/changes from the staging area into the repository.
Message:  It describes the changes made, making it easier to understand the purpose of each commit later.
Commit IDs (SHA-1 Hashes): Every commit in Git is assigned a unique identifier called a SHA-1 hash. This is a 40-character string.
git status : Shows Nothing to Commit, Working tree Clean.

Viewing Commit History : git log 
--> Shows details(commit ID, Author, Date & Msg) of recent commits in reverse chronological order.
Display a One-Line Summary : git log --oneline
To visualize the branching structure: git log --graph --oneline --all

To see what was changed in a specific commit: git show <commit-hash>

NOTE : 
1] If you make changes to the file after committing, the file returns to the workspace (working directory) as "modified". These changes are not tracked by Git until you explicitly stage and commit them again.
2] HEAD points to the current position in the repository. When you’re working on the master branch, HEAD points to the latest commit on master. If you switch branches, HEAD will point to the latest commit of the new branch.


Pushing Code to a Remote Repository on GitHub :-
Open GitHub in your browser and log in with your credentials.
Click on the "New" button (or "Create Repository").
Fill in the following details:
Repository Name: Use a name similar to your local repository (e.g., dsg).
Description (Optional): Provide a short description of your project.
Visibility:
Public: Anyone can view your repository.
Private: Only you and collaborators can view your repository.
Click on the "Create Repository" button.
Copy the Repository URL.

Switch back to your terminal where the local repository (dsg) is set up.
Add the Remote Repository to Your Local Repo: git remote add origin <remote-repo-URL>
Verify the Remote Repository: git remote -v
To remove the Remote Repository from Your Local Repo : git remote rm origin

Setting Up a Personal Access Token (PAT)
Step 1: Generate a PAT
Log into your GitHub account.
Click on your profile picture (top-right corner) and select Settings.
On the left sidebar, go to Developer Settings > Personal Access Tokens > Tokens (classic).
Click on Generate New Token.
Choose the required permissions:
Chose Repository (for accessing private repositories).
Set an expiration date (e.g., 30 days or no expiration).
Click Generate Token and copy the ONE TIME generated token. 
Token Generated : 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

Push the code to the remote repository: git push origin master
-Provide username of GitHub account.
-Paste the Generated Token in place of Password.

To check Commit Status : git log
shows--> (HEAD -> master, origin/master) means:
You are on the master branch.
Your local branch is synchronized with the master branch on the remote repository (origin).


Day068 --------------------

Sharing a Private Repository with Collaborators  
1. Open your repository and go to Settings > Collaborators and Teams.  
2. Click Invite a collaborator, enter their GitHub username or email, and send the invite.  
3. The collaborator accepts the invitation via email or notifications and can then clone, push, and pull changes based on the permissions set.  

NOTE : 
1] Handling Changes to Pushed Files : 
If a pushed file is edited, it returns to the *workspace* as "modified." Stage and commit the changes again to include them in a new commit, then push to update the remote repository.

Checking Commit History in GitHub
View Commit History: In your repository, go to the "Commits" tab to see a list of all commits, who made them, and when.
Check File History: Open a file and click on "History" to view changes made to that specific file, along with commit messages and authors. 

Setting Up Git and Pulling a Repository on Another Developer's EC2 Instance : VaishnaviGhuge
Install Git: Install Git if not already done (yum install git -y).
Configure Git: Set up Git with the developer's username and email using.
Clone the Repository:- Use the repository URL to clone the remote repository: git clone <repo-url>
Navigate to the Repository: Move into the repository directory (cd dsg) to begin working.

NOTE: If the Repo is Private, then on running the clone command it will ask for username of the collaborator and in place of password token needs to be pasted i.e. Personal Access Token (PAT).
Since it is private repo it can be access only if the other developer is in collaborators list.

Adding and Editing Code by 2nd Developer :-
Add/Edit Code: The 2nd developer makes changes to files in the dsg repository.
Stage and Commit: Stage the changes and commit them locally.
Push Updates: Push the changes to the remote repository: git push origin master .

Pulling Updates by 1st Developer
Check for Updates: The 1st developer runs: git pull in the dsg directory to fetch and merge the latest changes from the remote repository.
Verify Updates: They can check the modified files and updated parts locally.

Forking the dsg Repository for Dev3 :-
Dev3 logs into their GitHub account.
Fork the Repository:
Navigate to the dsg repository in GitHub.
Click on the "Fork" button (top-right corner).
The repository is forked into Dev3's account as a separate copy.
Clone the Forked Repository:
Dev3 copies the URL of their forked repository and runs: git clone <forked-repo-url>
Dev3 can add/edit files, stage, commit, and push changes to their fork without affecting the original repository.
If Dev3 wants to contribute back, they can create a pull request to the original dsg repository.


Day069----------------------------------

Interview*
Q] How to edit the comment provided as Messasge during last/recent Commit?
--> If you want to change the message of the most recent commit:
git commit --amend -m "New commit message"
Q] To change the author of a commit: git commit --amend --author="New Author Name <newemail@example.com>"

Ensure you haven’t pushed the commit to a remote repository yet. If you’ve already pushed, you’ll need to force-push:
git push --force

<<<<<<< HEAD
Dealing with Folders in Git:-
Git tracks files but does not recognize or track empty folders.
A folder will only be part of a commit if it contains at least one tracked file or even empty file.
If there's a requirement to include an empty folder in your Git repository, you can create a .gitignore file within that folder. This .gitignore file serves as a placeholder and allows Git to recognize the folder.

Other Uses of .gitignore:-
The .gitignore file is commonly used to specify files or patterns of files that Git should ignore and not track.
Examples:
Ignoring log files, temporary files, or system-specific files. Ex. *.log, *.tmp, node_modules/, .env

To delete all untracked files and directories from the workspace in Git:-
to Delete Untracked Files: git clean -f
to Delete Untracked Files and Directories: git clean -fd
Dry Run First: To avoid accidentally deleting important files, always use: git clean -n first to see what will be removed among the files

If you have edited a committed file and now it is in Modified state, now you want to discard the changes to revert it to the last committed state: 
git checkout -- <file-name>
Alternative : git restore <file-name>

NOTES:
1] No Recovery: Once you discard changes, the edits are permanently lost. Ensure you do not need the changes before running the command.
2] Unstaged Changes Only: These commands only affect unstaged changes in the working directory. If the file is staged (added to the staging area), you need to first unstage it using git reset <file-name>.

**MImp Que: Diff between git fetch Vs git pull :-
Git Fetch: Downloads updates from the remote repository but doesn't merge them into your local branch.
Use git fetch when:
You want to see the changes on the remote branch before merging them.
You plan to review or test updates before applying them locally.
git diff After git fetch :- This shows the changes between your local branch (master) and the corresponding remote branch (origin/master). It helps you review what will change if you decide to merge.
: git diff master origin/master

Git Pull: Downloads updates from the remote repository and automatically merges them into your local branch.
Use git pull when:
You are ready to bring your local branch in sync with the remote branch immediately.
You are confident in the changes being merged without additional review.


Day070-------------------------------------

Scenario: Push Without Recent Changes and Handling Merge
When multiple developers work on the same repository, it's essential to synchronize with the latest remote changes before pushing.
The developer attempts to push changes to the remote branch without pulling the latest commits.
Git rejects the push with the error:
What can be done..?
--> The developer runs the following command to enable fast-forward merges during pulls: git config pull.ff true
This setting ensures that if no conflicts exist, Git performs a fast-forward merge automatically during git pull which needs to be configured only once for a repo.
The developer executes: git pull origin master
If no conflicts exist, the merge happens automatically (fast-forward or regular merge).
If there are conflicts, Git pauses to resolve them.
Merge Commit: A merge commit records the history of both branches being combined, Created when the local branch and the remote branch have diverging commits.
Git prompts the developer to confirm the merge commit message in a text editor (default is vim), save the message.
Once the pull and merge are complete, the developer pushes the updated local branch: git push origin master

In the same condition what happens if the file getting push is same with different content.
Git rejects the push with the error;
Pulling the Latest Changes: Git attempts to merge the changes from the remote branch into the local branch. If the file content differs, a merge conflict occurs.
Merge Conflict Detected: The Conflict file when open in editor will include conflict markers (<<<<<<<, =======, >>>>>>>) indicating the differences between the local and remote changes. The developer must edit the file to remove these markers and keep the desired content.
After resolving the conflict, the developer stages the file, commits the resolved changes. Git prompts for a merge commit message by default, explaining the conflict resolution.
Pushing the Resolved Changes: git push origin master

Branching :-
Branching is a common strategy to avoid conflicts in scenarios where multiple developers work on the same repository. By isolating changes in separate branches, the team can reduce the likelihood of editing the same files simultaneously.
Main Branch (Master): The default branch, typically the production-ready version of the code.
Feature Branches: Used for developing new features or working on fixes without affecting the main branch.


*** INTERVIEW QUESTION ***
1] Where can be seen the Graphical Representation of Commits to a Repo ? 
--> GitHub:- Go to the "Insights" tab.
--> Command Line (Locally):- Use the git log command with the --graph option: git log --oneline --graph

2] What is the difference between a fork and a clone?
Fork: Creates a copy of a repository under your GitHub account, enabling independent development.
Clone: Downloads a repository to your local machine for offline development, typically linked to the original repo.

3] What is the difference between HEAD and master?
HEAD: A pointer to the current commit or branch you're working on.
master: The default main branch in Git (now often replaced by main).

4] What is the difference between git add and git commit?
git add: Moves changes from the working directory to the staging area.
git commit: Records the staged changes as a snapshot in the repository's history.

5] What is the difference between the working directory and the staging area?
Working Directory: The files you see in your local repo that you can edit.
Staging Area: A space where changes are prepared before committing to the repository.

6] What is the strategy in your organization with Git?
In Our project we are having quaterly based release.
for in every quater we have a main release and we create main release branches in every quater.
For Q1 we have 2024Q1 branch for Q2 release we have 2024Q2 branch which we created from 2024Q1 branch.
types of branch
1. Main release branch:-
this branch has commits which will go to production deployment after the release is completed.
2. Feature Branch:-
Feature branches are created when dev team is working on some feature, and feature branch is then merged in the Main release branch after verifiction.
if this feature is needed in previous releases then we can also back merge this feature in the pervious main release branches.
3. Bug Fix Branch:-
when a client is having a release and has some issue or he finds some bug, we then create a bug fix branch from the
main release branch which is client is using.
after the fixes are done in the bug fix branch we provide it to the client.
if the same bug is found in the later releases then we can forward merge it in the further branches, also can be back merged if required.
